const aLLL = [[-1448260238n, -12778033679726n, -46671229957710n, 22119786771154n, 27708029636082n, -22438238668014n, -34239632860622n, -4382943687854n, 8584312843890n, -4127871589486n, 8400903310002n, -11734527753262n, 27623303114482n, -16857517642734n, 5491174120242n, 18668149070930n, -1330558201998n, 1101586846866n, 23911899122610n, -11978722732846n],
  [2456726561834n, -3261629580086n, -29057456210070n, -7883513836534n, 31945299444394n, -5904400710838n, -24028330086934n, -8636803292534n, 6821737120042n, -34305302959670n, -31018921034646n, 7060520311050n, 14765354278826n, -8758653587382n, -20175659537686n, 8317473550218n, -10921060491734n, -2987718797622n, 5900808190314n, 6352173884938n],
  [8042575855974n, 813702672838n, 21581825640486n, 8883610035334n, -26255500269850n, 1036335804230n, 23567418219942n, -59603824122n, 25940808379494n, 4627497995462n, -25095571369178n, -7790883610746n, -1444450725402n, 722857134662n, -18908505102170n, -23894342415098n, -15177942083738n, -12318375958586n, 12756255809062n, 15774489680518n],
  [-49926751308n, 22840726110964n, -3448514642380n, 6728711122292n, 50694484168884n, 11896772388852n, -17420761795788n, -21289175223692n, 10636143502772n, -12584063447820n, 10571621705780n, 33447933867892n, 16024538905268n, -21277299740172n, 2190719327540n, -16944424797068n, 6434888028084n, 17819255953140n, 8234121155124n, 6241722843508n],
  [8043754892887n, -38916266631993n, 23882357015095n, 2619077463719n, -20615629409769n, 19068392119431n, 63315709066743n, 2837792392807n, 14856374199767n, 411971439687n, -23683213006409n, -14139599229401n, -13615773431401n, 10242565925895n, 5574772802935n, 2355273254375n, -1682386002601n, 11336528427975n, 8415441228087n, -34697163633241n],
  [-5494973979516n, -3768771516220n, 7235101896964n, -19515695350460n, 23438541016452n, 57947009982916n, 3234283125252n, 5251495302724n, -25447099812220n, 6873097837252n, -12648694512892n, -933295214780n, -14975211774076n, 50371998929860n, 20863835786244n, 9710816168004n, -14836142880636n, -35171132322620n, -16681195776764n, 32376126316868n],
  [-5483787940079n, -14637515878623n, 17850398343217n, 8949933093441n, 9702913766737n, 26217836632417n, 32304808029809n, 5980854830209n, -16772670002287n, -6669745261663n, 8075973487793n, -579480295743n, 16430785130961n, 39330324946401n, 3935927565041n, 55523837974785n, 17014677604369n, -6696604575711n, -12431751833295n, 14269142784833n],
  [-8032964665055n, 21247545045553n, 30929614226497n, 38962464794449n, 4709664238433n, 46931283075185n, 5116035389057n, 25432913878417n, 13768716371361n, -8484093305167n, -5787236730687n, -5382118136879n, -12479184539679n, 8488349265137n, -33497656644863n, -19141840389615n, 13977842297377n, 4331186424625n, -15699184980671n, 27715581108305n],
  [4988218521118n, 12616703326718n, -21204778378274n, -729956697154n, -24269072369250n, -33943758228098n, -41702548156578n, 5942270699326n, -10232590131938n, -1083939647234n, -45758359739682n, -12708051193154n, 12552936562846n, -10046183846786n, -8702244465058n, 11381428035134n, 16650379494430n, 13944071383038n, 22893499623902n, -28409737139778n],
  [10859897282794n, -16009052371574n, -28077257042902n, 21097912872138n, -206584942742n, 3730747636746n, 25181579293354n, -20380089126070n, 27191160511978n, -7834730081654n, -18843310182102n, 8168779438538n, 8388211764330n, -14474887821046n, -9054197428310n, -8396358786998n, 1437819853546n, 12575312994186n, -11470762766806n, 19726741079754n],
  [-7785498351601n, 31356985997823n, 9909996108527n, -2817590650145n, -35685247940145n, 5288384100287n, 3640951362735n, 7298985169055n, -7100594185329n, 3894496912767n, 18834937831023n, -3750473468321n, 4118829931855n, 3561000485695n, -34042906421201n, 5619317918751n, 7859936104207n, 20120144351487n, 29419781112303n, -4450764058145n],
  [-15649636543501n, -1908413202397n, -1804244975789n, 26155764302211n, -7805507340621n, 15748335521507n, -34485888812525n, 12610082285635n, -2321680889485n, 7215291256227n, 44027603297491n, 23636070121219n, -7236256904141n, -25012997587869n, -2849669480557n, -17631285738045n, 26616579342067n, -7244259402973n, -6060271105453n, -2521340642173n],
  [-18491400876168n, -4900215517448n, -6830241347976n, 21163840042488n, 16159978118520n, 8593158356216n, -21634197842824n, -4431664618504n, -4381551121544n, 2043191225080n, 38341802238584n, -15917443100168n, -16154482083464n, 13179037980920n, 12206922936440n, 35960063377400n, 28251901052792n, -31724682033416n, 20311095066232n, 24433634684408n],
  [-4844884945495n, -16727797029063n, 3490148401609n, 9661359584601n, 10717868544489n, 13348777617273n, 28592339043849n, 10588371811737n, -2765442277847n, 8602169554873n, -27136636757431n, 7588778513881n, -12754114872727n, 26999493236729n, -25823672861047n, -28601553011175n, -7734381844823n, -12048436164551n, -1942349172023n, 24752019699289n],
  [-14937328018869n, 18082834551803n, -2403011299157n, 23070439929947n, 17344700465931n, -8725186803525n, -943262729877n, 12838792545563n, 7655689591755n, 13889301818747n, 7894717573675n, 20345079906779n, -879696337781n, 657627611707n, 25750462860011n, 7218811563675n, 28387117718859n, -6335132727557n, 40341554437035n, -18369247458469n],
  [6141026202367n, -19291564456977n, -18640159820833n, 6565390987983n, 32484313936063n, 1745196162479n, -13911857960545n, 22895682815119n, 13490667904639n, 1187363088239n, 12794002902879n, -16489025321393n, 9461976038463n, -30568369643217n, 35815397664031n, -10446584481777n, -10587809773057n, -3274582897937n, 4365799500511n, 2437771762127n],
  [-17541499701901n, -18091677238877n, 777749549267n, 36973368814339n, 12312441813043n, 5024920823907n, 10647975635859n, -28706250657341n, 3974671559411n, -2041065388253n, 15379662124627n, -11309664147325n, 26276636102067n, -6915167758877n, -4707210596077n, 7443560238915n, 269939794035n, -14698604981085n, 8977530018771n, 362272646659n],
  [-1386259850433n, 3423168589871n, -16619435989985n, 12373450925839n, 11511687981311n, -4577750951441n, -44635762644513n, 5932736678095n, -3126138837313n, -13089806339153n, 30467539820447n, 1498640112271n, -75452509057n, 10924282772847n, 1194982802783n, -29116057183153n, -32751811546561n, 13522518193967n, -18623108310241n, 6054998756879n],
  [10711311805721n, 1077561689513n, 36740932605753n, 23665386205641n, -8342605339303n, 19521111802345n, 12323744175993n, 10898789119497n, -31652527936103n, 1054227271209n, -17122992478279n, 17802438232649n, -10829462534695n, 35502810688105n, 10721860192249n, 30043314908809n, -4902738940391n, -26106192275799n, -5734346459079n, 10406576366281n],
  [-18091677238877n, 777749549267n, 36973368814339n, 12312441813043n, 5024920823907n, 10647975635859n, -28706250657341n, 3974671559411n, -2041065388253n, 15379662124627n, -11309664147325n, 26276636102067n, -6915167758877n, -4707210596077n, 7443560238915n, 269939794035n, -14698604981085n, 8977530018771n, 362272646659n, 36478988018483n]]

const aLLLinv = [[2.13162820728e-14, -1.7763568394e-14, 1.7763568394e-14, 2.48689957516e-14, 3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, 7.1054273576e-15, 3.5527136788e-15, -2.13162820728e-14, 0.0, -2.13162820728e-14, -3.5527136788e-15, 1.42108547152e-14, -1.06581410364e-14],
  [0.0, 0.0, -7.1054273576e-15, -7.1054273576e-15, -1.06581410364e-14, 3.5527136788e-15, -1.06581410364e-14, 1.06581410364e-14, -7.1054273576e-15, 3.5527136788e-15, 3.5527136788e-15, -1.06581410364e-14, -7.1054273576e-15, -1.06581410364e-14, 1.06581410364e-14, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15],
  [-3.5527136788e-15, -3.5527136788e-15, 1.06581410364e-14, 1.06581410364e-14, 3.5527136788e-15, -7.1054273576e-15, 7.1054273576e-15, 0.0, 3.5527136788e-15, -1.42108547152e-14, -7.1054273576e-15, 0.0, 3.5527136788e-15, 0.0, -7.1054273576e-15, 0.0, 0.0, 0.0, 0.0, 3.5527136788e-15],
  [3.5527136788e-15, -3.5527136788e-15, -7.1054273576e-15, -3.5527136788e-15, 0.0, -3.5527136788e-15, -7.1054273576e-15, 7.1054273576e-15, 0.0, 7.1054273576e-15, 0.0, -3.5527136788e-15, 0.0, 0.0, 3.5527136788e-15, 0.0, 7.1054273576e-15, 3.5527136788e-15, 1.06581410364e-14, 0.0],
  [1.42108547152e-14, -3.5527136788e-15, -7.1054273576e-15, 7.1054273576e-15, 0.0, -3.5527136788e-15, -3.5527136788e-15, 7.1054273576e-15, -7.1054273576e-15, -1.06581410364e-14, -7.1054273576e-15, -7.1054273576e-15, 0.0, 7.1054273576e-15, -3.5527136788e-15, -3.5527136788e-15, -3.5527136788e-15, -7.1054273576e-15, 0.0, 0.0],
  [7.1054273576e-15, 0.0, 0.0, 3.5527136788e-15, 7.1054273576e-15, 1.42108547152e-14, -3.5527136788e-15, 3.5527136788e-15, 0.0, 3.5527136788e-15, 7.1054273576e-15, 7.1054273576e-15, -3.5527136788e-15, -7.1054273576e-15, -3.5527136788e-15, 0.0, 0.0, -3.5527136788e-15, 0.0, 0.0],
  [-1.06581410364e-14, 3.5527136788e-15, -1.06581410364e-14, -7.1054273576e-15, -3.5527136788e-15, -3.5527136788e-15, -3.5527136788e-15, 0.0, -7.1054273576e-15, 7.1054273576e-15, 7.1054273576e-15, -7.1054273576e-15, -3.5527136788e-15, 3.5527136788e-15, 7.1054273576e-15, 7.1054273576e-15, 7.1054273576e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15],
  [0.0, 7.1054273576e-15, 0.0, -1.06581410364e-14, -3.5527136788e-15, -3.5527136788e-15, 7.1054273576e-15, 3.5527136788e-15, -3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, -7.1054273576e-15, 3.5527136788e-15, 7.1054273576e-15, 1.06581410364e-14, -7.1054273576e-15, 0.0, 0.0, 0.0],
  [2.13162820728e-14, 0.0, 2.13162820728e-14, -3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, 7.1054273576e-15, 7.1054273576e-15, -1.06581410364e-14, -3.5527136788e-15, -1.42108547152e-14, 3.5527136788e-15, -3.5527136788e-15, -1.42108547152e-14, 7.1054273576e-15, -1.7763568394e-14, -1.42108547152e-14, 0.0, -1.42108547152e-14, 3.5527136788e-15],
  [4.26325641456e-14, -2.48689957516e-14, 0.0, 0.0, -3.5527136788e-15, 7.1054273576e-15, -7.1054273576e-15, 7.1054273576e-15, -1.06581410364e-14, -7.1054273576e-15, -7.1054273576e-15, 0.0, -1.06581410364e-14, 3.5527136788e-15, -7.1054273576e-15, -1.7763568394e-14, -1.06581410364e-14, -1.7763568394e-14, -3.5527136788e-15, 7.1054273576e-15],
  [3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, 0.0, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, -7.1054273576e-15, -3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, 0.0, -3.5527136788e-15, 0.0, -3.5527136788e-15, 3.5527136788e-15, 0.0, -3.5527136788e-15],
  [3.5527136788e-15, 7.1054273576e-15, 3.5527136788e-15, 0.0, 0.0, 0.0, 3.5527136788e-15, -7.1054273576e-15, -7.1054273576e-15, 3.5527136788e-15, 0.0, 1.06581410364e-14, -7.1054273576e-15, 0.0, 7.1054273576e-15, -7.1054273576e-15, -7.1054273576e-15, 0.0, 3.5527136788e-15, 3.5527136788e-15],
  [-3.5527136788e-15, -3.5527136788e-15, 1.7763568394e-14, 7.1054273576e-15, -7.1054273576e-15, 3.5527136788e-15, 2.13162820728e-14, -7.1054273576e-15, 1.06581410364e-14, -3.5527136788e-15, 0.0, 7.1054273576e-15, -1.06581410364e-14, 0.0, 0.0, 7.1054273576e-15, 7.1054273576e-15, 3.5527136788e-15, -7.1054273576e-15, -3.5527136788e-15],
  [3.5527136788e-15, -7.1054273576e-15, 1.42108547152e-14, 7.1054273576e-15, 3.5527136788e-15, 3.5527136788e-15, 1.42108547152e-14, -3.5527136788e-15, 7.1054273576e-15, -3.5527136788e-15, -7.1054273576e-15, 0.0, 3.5527136788e-15, 3.5527136788e-15, 3.5527136788e-15, -1.06581410364e-14, -7.1054273576e-15, 1.42108547152e-14, -7.1054273576e-15, -3.5527136788e-15],
  [-2.48689957516e-14, 0.0, 0.0, 0.0, 0.0, 3.5527136788e-15, 3.5527136788e-15, -7.1054273576e-15, 1.06581410364e-14, 1.06581410364e-14, 0.0, -3.5527136788e-15, 3.5527136788e-15, -7.1054273576e-15, 1.06581410364e-14, 1.42108547152e-14, 7.1054273576e-15, 1.06581410364e-14, 0.0, 0.0],
  [2.13162820728e-14, 3.5527136788e-15, -7.1054273576e-15, -1.06581410364e-14, 0.0, 0.0, -3.5527136788e-15, 7.1054273576e-15, -1.42108547152e-14, 0.0, 0.0, -3.5527136788e-15, -3.5527136788e-15, -1.06581410364e-14, 0.0, -1.06581410364e-14, -7.1054273576e-15, -1.06581410364e-14, 3.5527136788e-15, 7.1054273576e-15],
  [-1.42108547152e-14, -7.1054273576e-15, 7.1054273576e-15, 1.42108547152e-14, 0.0, -3.5527136788e-15, 1.42108547152e-14, -3.5527136788e-15, 1.7763568394e-14, 0.0, -7.1054273576e-15, 7.1054273576e-15, 1.06581410364e-14, 7.1054273576e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, 0.0, -7.1054273576e-15, -7.1054273576e-15],
  [-3.5527136788e-15, -7.1054273576e-15, -1.06581410364e-14, 7.1054273576e-15, 7.1054273576e-15, -3.5527136788e-15, 3.5527136788e-15, 0.0, 7.1054273576e-15, 7.1054273576e-15, 7.1054273576e-15, -7.1054273576e-15, 3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, 3.5527136788e-15, -3.5527136788e-15, 7.1054273576e-15, -3.5527136788e-15, 7.1054273576e-15],
  [-7.1054273576e-15, 3.5527136788e-15, 7.1054273576e-15, 1.06581410364e-14, 7.1054273576e-15, 0.0, 0.0, -1.06581410364e-14, 7.1054273576e-15, 0.0, 1.42108547152e-14, 0.0, 1.06581410364e-14, 7.1054273576e-15, 0.0, 1.06581410364e-14, 0.0, 3.5527136788e-15, 3.5527136788e-15, 0.0],
  [-1.7763568394e-14, 0.0, 3.5527136788e-15, 3.5527136788e-15, -7.1054273576e-15, -3.5527136788e-15, 7.1054273576e-15, -7.1054273576e-15, 7.1054273576e-15, 1.06581410364e-14, 7.1054273576e-15, -3.5527136788e-15, 1.06581410364e-14, 7.1054273576e-15, -3.5527136788e-15, 1.42108547152e-14, 0.0, 3.5527136788e-15, 0.0, 3.5527136788e-15]]

const P = [0n, 49720483695876n, 137139456763464n, 233987836661708n, 14307911880080n, 83935042429844n, 145080971318744n, 160613567801436n, 33313044635424n, 71300602445348n, 191662796360040n, 35596010767596n, 139814728398000n, 103370737179828n, 120424722284792n, 233843537749372n, 272110203194944n, 20902998949700n, 160211348143240n, 245358588709388n]

function multiply (matrix, vector) {
  const rows = matrix.length
  const columns = matrix[0].length

  const result = new Array(rows)

  for (let row = 0; row < rows; row++) {
    let sum = 0n
    for (let column = 0; column < columns; column++) {
      sum += matrix[column][row] * vector[column]
    }
    result[row] = sum
  }
  return result
}

function scale (vector, scalar) {
  const result = new Array(vector.length)
  for (let i = 0; i < vector.length; i++) {
    result[i] = vector[i] * scalar
  }
  return result
}

function add (vectorA, vectorB) {
  const result = new Array(vectorA.length)
  for (let i = 0; i < vectorA.length; i++) { result[i] = vectorA[i] + vectorB[i] }
  return result
}

function sub (vectorA, vectorB) {
  const result = new Array(vectorA.length)
  for (let i = 0; i < vectorA.length; i++) { result[i] = vectorA[i] - vectorB[i] }
  return result
}

function isInRegion (point, min, max) {
  for (let i = 0; i < point.length; i++) {
    if (point[i] < min[i] || point[i] > max[i]) { return false }
  }
  return true
}

// mutates components and v
function getNextPoint (components, v, A, mins, maxs) {
  const vRef = v
  for (let index = 0; index < components.length; index++) {
    components[index] += 1n
    v = add(A[index], v)
    if (components[index] > maxs[index]) {
      components[index] = mins[index]
      v = sub(v, scale(A[index], maxs[index] - mins[index] + 1n))
    } else {
      for (let i = 0; i < vRef.length; i++) vRef[i] = v[i]
      return true
    }
  }
  return false
}

function dumbiterate (mins, maxs, A, P, LowerBounds, UpperBounds) {
  const temp = [...mins]
  const v = add(multiply(A, temp), P)
  const results = []
  while (true) {
    if (isInRegion(v, LowerBounds, UpperBounds)) {
      // console.log('Found possible seed: ', v)
      results.push([...v])
    }
    if (!getNextPoint(temp, v, A, mins, maxs)) { return results }
  }
}

function findAllSeedTuplesInBB (UpperBounds, LowerBounds) {
  const N = UpperBounds.length
  const min = new Array(N).fill(0)
  const max = new Array(N).fill(0)
  for (let x = 0; x < N; x++) {
    for (let y = 0; y < N; y++) {
      if (aLLLinv[x][y] < 0) {
        min[y] += Number(UpperBounds[x] - P[x]) * aLLLinv[x][y]
        max[y] += Number(LowerBounds[x] - P[x]) * aLLLinv[x][y]
      } else {
        max[y] += Number(UpperBounds[x] - P[x]) * aLLLinv[x][y]
        min[y] += Number(LowerBounds[x] - P[x]) * aLLLinv[x][y]
      }
    }
  }
  const minCeil = new Array(N)
  const maxFloor = new Array(N)
  for (let i = 0; i < N; i++) { minCeil[i] = BigInt(Math.ceil(min[i])) }
  for (let i = 0; i < N; i++) { maxFloor[i] = BigInt(Math.floor(max[i])) }

  return dumbiterate(minCeil, maxFloor, aLLL, P, LowerBounds, UpperBounds)
}

function lcg (seed) {
  return (seed * 0x5DEECE66Dn + 0xBn) & ((1n << 48n) - 1n)
}

function crack (bits) {
  const UpperBounds = new Array(bits.length)
  const LowerBounds = new Array(bits.length)
  for (let i = 0; i < bits.length; i++) {
    UpperBounds[i] = (BigInt(bits[i]) << 44n) + ((1n << 44n) - 1n)
    LowerBounds[i] = (BigInt(bits[i]) << 44n)
  }
  const a = findAllSeedTuplesInBB(UpperBounds, LowerBounds)
  if (a.length === 0) return 0n
  return lcg(a[0][bits.length - 1]) // returns the seed after
}

module.exports = crack
